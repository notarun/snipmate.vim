snippet #!
	#!/usr/bin/env node
# import
snippet im
	import ${1:stuff} from '${2:module}';${3}
# const
snippet const
	const ${1:identifier} = ${2:value};${3}
# let
snippet let
	let ${1:identifier} = ${2:value};${3}
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
	  ${3:// body}
	}
# Anonymous Function
snippet f
	(${1:args}) => ${2}
# Function Expression
snippet cf
	const ${1:identifier} = (${2:args}) => {
	  ${3:// body}
	};
# Class
snippet cl
	class ${1:class_name } {
	  ${2:// body}
	}
# Class with extend
snippet cle
	class ${1:class_name } extends ${2:parent_class }{
	  ${3: // body}
	}
# Constructor
snippet con
	constructor(${1:args}) {
	  ${2:// code}
	}
# Method
snippet m
	${1:method_name}(${2:args}) {
	  ${3:}
	}
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {
	  ${2}
	} else {${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
	  case '${3:case}':
	    ${4:// code}
	    break;
	  ${5}
	  default:
	    ${2:// code}
	}
# case
snippet case
	case '${1:case}':
	  ${2:// code}
	  break;
	${3}
# for (...) {...}
snippet for
	for (let ${1:i} = 0; $1 < ${2:things}; $1${3:++}) {
	  ${4:// code}
	}
# for...of
snippet foro
	for (const ${1:element} of ${2:iteratable}) {
	  ${3:// code}
	}
# for...in
snippet fori
	for (const ${1:property} in ${2:enumerable}) {
	  ${3:// code}
	}
# while (...) {...}
snippet wh
	while (${1:condition}) {
	  ${2:// code}
	}
# do...while
snippet do
	do {
	  ${2:// code}
	} while (${1:condition});
# console log
snippet clg
	console.log(${1:string});${2}
# process exit
snippet pe
	process.exit();
