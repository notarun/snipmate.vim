# Include
snippet inc
	#include <${1:iostream}>${2}
snippet Inc
	#include "${1:`Filename('$1.h')`}"${2}
snippet un
	using namespace ${1:std};${2}
# Once
snippet once
	#pragma once
# Main
snippet main
	int main(int argc, char *argv[])
	{
		${1};
		return 0;
	}
# Function
snippet fun
	${1:auto} ${2:do_something}(${3})
	{
		${4};
	}
# Function declaration
snippet fund
	${1:auto} ${2:do_something}(${3});${4}
# lambda
snippet f
	[](${1}) ${2:-> Type} { $3 };
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {

	${2}

	}
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`} {
	public:
		$1(${2});
		virtual ~$1();

	private:
		${3}
	};
# Range based for loop
snippet forr
	for (auto ${1:needle} : ${2:haystack}) {
		${3:/* code */};
	}
# For loop
snippet for
	for (auto ${1:i} = 0; $1 < ${2:count}; $1${3:++}) {
		${4:/* code */};
	}
# std::map
snippet map
	std::map<${1:std::string}, ${2:value}> ${3:map};
# std::vector
snippet vector
	std::vector<${1:type}> ${2:vector};
# cout
snippet cout
	std::cout << ${1:var} << std::endl;${2}
